<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>程式人文集</title>
  <style type="text/css">
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; line-height: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code > span.kw { color: #007020; font-weight: bold; }
code > span.dt { color: #902000; }
code > span.dv { color: #40a070; }
code > span.bn { color: #40a070; }
code > span.fl { color: #40a070; }
code > span.ch { color: #4070a0; }
code > span.st { color: #4070a0; }
code > span.co { color: #60a0b0; font-style: italic; }
code > span.ot { color: #007020; }
code > span.al { color: #ff0000; font-weight: bold; }
code > span.fu { color: #06287e; }
code > span.er { color: #ff0000; font-weight: bold; }
  </style>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="程式人文集" class="section level1"><h1>程式人文集</h1><div id="arduino入門教學5-多顆-led-的控制-作者copper-maa" class="section level2"><h2>Arduino入門教學(5) – 多顆 LED 的控制 (作者：Copper Maa)</h2><div id="實驗lab5-led-bar-graph" class="section level3"><h3>實驗：Lab5 LED Bar Graph</h3><p>控制 LED 燈排 (LED Bar Graph)，製作出類似「霹靂遊俠」影集中「夥計」車頭 LED 燈排的掃瞄效果。LED Bar Graph 適合當作電池電量或音量之類的指示燈，其外觀如下：</p></div><div id="材料" class="section level3"><h3>材料</h3><p>麵包板 x 1 Arduino 主板 x 1 LED bar garph x 1 或是 LED x 10 220 ohm 電阻 x 10 單心線 x N 接線</p><p>把 LED bar graph 或 10 顆 LED 接到 pin2 到 pin11 腳 。LED 的接法為: 長腳(陽極)接到 pin 腳，短腳(陰極)串接一顆 220 ohm 電阻接到 GND</p></div><div id="電路圖" class="section level3"><h3>電路圖</h3><div class="figure"><img src="images/img5.png" /></div></div><div id="程式碼-ledbargraph.pde" class="section level3"><h3>程式碼: LEDBarGraph.pde</h3><pre class="sourceCode CPP"><code class="sourceCode cpp">
<span class="co">// these constants won&#39;t change:</span>
<span class="dt">const</span> <span class="dt">int</span> ledCount = <span class="dv">10</span>;    <span class="co">// the number of LEDs in the bar graph</span>

<span class="dt">int</span> ledPins[] = { 
  <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>,<span class="dv">11</span> };   <span class="co">// an array of pin numbers to which LEDs are attached</span>

<span class="dt">void</span> setup() {
  <span class="co">// loop over the pin array and set them all to output:</span>
  <span class="kw">for</span> (<span class="dt">int</span> thisLed = <span class="dv">0</span>; thisLed &lt; ledCount; thisLed++) {
    pinMode(ledPins[thisLed], OUTPUT); 
  }
}

<span class="dt">void</span> loop() {
  <span class="co">// loop over the LED array</span>
  <span class="co">// Go from right to left</span>
  <span class="kw">for</span> (<span class="dt">int</span> thisLed = <span class="dv">0</span>; thisLed &lt; ledCount; thisLed++) {
    digitalWrite(ledPins[thisLed], HIGH);
    delay(<span class="dv">60</span>);
    digitalWrite(ledPins[thisLed], LOW);
  }
  
  <span class="co">// And from left to right again</span>
  <span class="kw">for</span> (<span class="dt">int</span> thisLed = ledCount -<span class="dv">1</span> ; thisLed &gt;= <span class="dv">0</span>; thisLed--) {
    digitalWrite(ledPins[thisLed], HIGH);
    delay(<span class="dv">60</span>);
    
    <span class="kw">if</span> (thisLed == <span class="dv">0</span>) {
      <span class="co">// 跑完一輪後&amp;#65292;讓第一顆 LED 亮著暫停一下</span>
      delay(<span class="dv">200</span>); 
    } <span class="kw">else</span> {
      digitalWrite(ledPins[thisLed], LOW);
    }
  } 
}</code></pre></div><div id="說明" class="section level3"><h3>說明：</h3><ul><li>L04: 宣告 ledPins 陣列並定義 LED bar 或 10 顆 LED 所在的腳位，在此使用 pin2 到 pin11 這 10 支腳位</li><li>L17~L20: 讓 LED 產生掃瞄的效果，先由右往左</li><li>L23~L33: 繼續讓 LED 產生掃瞄的效果，這次換成由左往右。跑完一輪後(先由右往左，再由左往右，這樣算一輪)，不關閉第一顆 LED 燈號，讓第一顆 LED 暫停一下</li></ul></div><div id="動動腦" class="section level3"><h3>動動腦</h3><p>接上一顆可變電阻，利用可變電阻來控制 LED bar graph。提醒：使用 analogRead() 讀進來的可變電阻數值介於 0 到 1023，程式的邏輯可以這樣寫：介於 0 – 99 就開第一顆 LED、介於 100 – 199 開第二顆 LED、介於 200 – 299 開第三顆…，也可以先利用 map() 函式將 0 到 1023 的數值對應為 0 到 9 之間的數值，然後再決定開哪些 LED。</p></div><div id="範例照片影片" class="section level3"><h3>範例照片／影片</h3><ul><li><a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=WVo6byx7LK8">http://www.youtube.com/watch?feature=player_embedded&amp;v=WVo6byx7LK8</a></li></ul></div><div id="延伸閱讀" class="section level3"><h3>延伸閱讀</h3><ul><li>LED 10-bar array -- <a href="http://www.sqlskills.com/blogs/paulselec/post/Arduino-projects-LED-10-bar-array.aspx">http://www.sqlskills.com/blogs/paulselec/post/Arduino-projects-LED-10-bar-array.aspx</a></li></ul><p>【本文作者為馬萬圳，原文網址為： <a href="http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab5-led-bar-graph.html">http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab5-led-bar-graph.html</a> ，由陳鍾誠編輯後納入本雜誌】</p></div></div><div id="javascript-5-在互動網頁中的應用以-html-編輯器為例-作者陳鍾誠" class="section level2"><h2>JavaScript (5) – 在互動網頁中的應用，以 HTML 編輯器為例 (作者：陳鍾誠)</h2><p>在本文當中，我們將透過 JavaScript 設計一個 HTML 編輯器，讓您可以直接在瀏覽器當中看到 HTML 網頁的呈現結果， 筆者認為這個範例對學習動態網頁設計是一個非常簡單、卻又很有啟發性的程式。因為他很明顯的展現了動態網頁的原理。</p><div id="html-編輯器" class="section level3"><h3>HTML 編輯器</h3><p>以下是該 HTML 編輯器的執行結果，當我們在 CSS 與 HTML 區塊輸入對應的原始碼之後，就可以按下「→」按鈕，然後在 呈現的 <code>&lt;div id=&quot;showbox&quot; ...&lt;/div&gt;</code> 區塊看到兩者搭配時的呈現結果。</p><div class="figure"><img src="images/img6.jpg" alt="HTML 編輯器的執行畫面" /><p class="caption">HTML 編輯器的執行畫面</p></div><p>您也可以點選下列連結以實際檢視該網頁：</p><ul><li>HTML 編輯器：<a href="https://dl.dropboxusercontent.com/u/101584453/pmag/201305/code/HtmlEditor.htm">https://dl.dropboxusercontent.com/u/101584453/pmag/201305/code/HtmlEditor.htm</a></li></ul><p>以下是這個網頁的原始 HTML 程式碼，其中有兩大段是我們預設填入的 CSS 與 HTML 原始碼，這兩段原則上可以去掉，但是 為了測試方便起見，我們就留在檔案中，請讀者閱讀的時候仔細區分之。</p><pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;html&gt;</span>
<span class="kw">&lt;style&gt;</span>
textarea, <span class="fl">#showbox</span> <span class="kw">{</span> <span class="kw">border:</span> <span class="dt">1px</span> <span class="dt">solid</span> <span class="dt">#9f9f9f</span><span class="kw">;</span> <span class="kw">}</span>
<span class="kw">&lt;/style&gt;</span>
<span class="kw">&lt;style</span><span class="ot"> id=</span><span class="st">&quot;showboxstyle&quot;</span><span class="kw">&gt;</span>
<span class="kw">&lt;/style&gt;</span>
<span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="kw">&gt;</span>
<span class="er">function convert() {</span>
<span class="er">  var cssbox  = document.getElementById(&quot;cssbox&quot;);</span>
<span class="er">  var editbox = document.getElementById(&quot;editbox&quot;);</span>
<span class="er">  var showbox = document.getElementById(&quot;showbox&quot;);</span>
<span class="er">  var showboxstyle = document.getElementById(&quot;showboxstyle&quot;);</span>
  <span class="ot">showbox</span>.<span class="fu">innerHTML</span> = <span class="ot">editbox</span>.<span class="fu">value</span>;
  <span class="ot">showboxstyle</span>.<span class="fu">innerHTML</span> = <span class="ot">cssbox</span>.<span class="fu">value</span>;
}
<span class="kw">&lt;/script&gt;</span>   
<span class="kw">&lt;body&gt;</span>
<span class="kw">&lt;form&gt;</span>
<span class="kw">&lt;table</span><span class="ot"> width=</span><span class="st">&quot;95%&quot;</span><span class="ot"> style=</span><span class="st">&quot;border-collapse: collapse; border: 0px;&quot;</span><span class="kw">&gt;&lt;tr&gt;</span>
<span class="kw">&lt;tr&gt;&lt;td</span><span class="ot"> colspan=</span><span class="st">&quot;2&quot;</span><span class="ot"> style=</span><span class="st">&quot;text-align:center&quot;</span><span class="kw">&gt;</span>HTML 原始碼　　<span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> value=</span><span class="st">&quot; → &quot;</span><span class="ot"> onclick=</span><span class="st">&quot;JavaScript:convert()&quot;</span><span class="kw">/&gt;</span>　　　顯示結果<span class="kw">&lt;/td&gt;&lt;/tr&gt;</span>
<span class="kw">&lt;td</span><span class="ot"> width=</span><span class="st">&quot;50%&quot;</span><span class="kw">&gt;</span>
<span class="kw">&lt;textarea</span><span class="ot"> id=</span><span class="st">&quot;cssbox&quot;</span><span class="ot"> style=</span><span class="st">&quot;width:100%; height:100px;&quot;</span> <span class="kw">&gt;</span>
<span class="co">&lt;!-- 預設貼入的CSS：開始 --&gt;</span>
td, th { padding:10px; }
th { background-color:black; color:white; }
table { border-collapse: collapse; border: 1px solid #373737; }
<span class="co">&lt;!---預設貼入的CSS：結束 --&gt;</span>
<span class="kw">&lt;/textarea&gt;</span>
<span class="kw">&lt;textarea</span><span class="ot"> id=</span><span class="st">&quot;editbox&quot;</span><span class="ot"> style=</span><span class="st">&quot;width:100%; height:400px;&quot;</span><span class="kw">&gt;</span>
<span class="co">&lt;!-- 預設貼入的HTML：開始 --&gt;</span>
Hello! <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://tw.yahoo.com&quot;</span><span class="kw">&gt;</span>Yahoo<span class="kw">&lt;/a&gt;&lt;br/&gt;&lt;/br&gt;</span>
<span class="kw">&lt;table&gt;</span>
<span class="kw">&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;</span>欄 1<span class="kw">&lt;/th&gt;&lt;th&gt;</span>欄 2<span class="kw">&lt;/th&gt;&lt;/tr&gt;</span>
<span class="kw">&lt;tr&gt;&lt;th&gt;</span>列 1<span class="kw">&lt;/th&gt;&lt;td&gt;</span>1,1<span class="kw">&lt;/td&gt;&lt;td&gt;</span>1,2<span class="kw">&lt;/td&gt;&lt;/tr&gt;</span>
<span class="kw">&lt;tr&gt;&lt;th&gt;</span>列 2<span class="kw">&lt;/th&gt;&lt;td&gt;</span>2,1<span class="kw">&lt;/td&gt;&lt;td&gt;</span>2,2<span class="kw">&lt;/td&gt;&lt;/tr&gt;</span>
<span class="kw">&lt;/table&gt;&lt;br/&gt;</span>
<span class="kw">&lt;form</span><span class="ot"> action=</span><span class="st">&quot;signup&quot;</span><span class="ot"> method=</span><span class="st">&quot;post&quot;</span><span class="kw">&gt;</span>
帳號: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> name=</span><span class="st">&quot;user&quot;</span><span class="kw">/&gt;&lt;br/&gt;</span>
密碼: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;password&quot;</span><span class="ot"> name=</span><span class="st">&quot;password&quot;</span><span class="kw">/&gt;&lt;br/&gt;</span>
信箱: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;email&quot;</span><span class="ot"> name=</span><span class="st">&quot;email&quot;</span><span class="kw">/&gt;&lt;br/&gt;</span>
生日: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;date&quot;</span><span class="ot"> name=</span><span class="st">&quot;birthday&quot;</span><span class="kw">/&gt;&lt;br/&gt;</span>
照片: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;file&quot;</span><span class="ot"> name=</span><span class="st">&quot;picture&quot;</span><span class="kw">/&gt;&lt;br/&gt;</span>
性別: <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;radio&quot;</span><span class="ot"> name=</span><span class="st">&quot;sex&quot;</span><span class="ot"> value=</span><span class="st">&quot;male&quot;</span><span class="ot"> checked</span><span class="kw">/&gt;</span> 男
      <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;radio&quot;</span><span class="ot"> name=</span><span class="st">&quot;sex&quot;</span><span class="ot"> value=</span><span class="st">&quot;female&quot;</span><span class="kw">/&gt;</span> 女<span class="kw">&lt;br/&gt;</span>
血型: <span class="kw">&lt;select</span><span class="ot"> name=</span><span class="st">&quot;BloodType&quot;</span><span class="kw">&gt;</span>
        <span class="kw">&lt;option</span><span class="ot"> value=</span><span class="st">&quot;A&quot;</span><span class="kw">&gt;</span>A 型<span class="kw">&lt;/option&gt;</span>
        <span class="kw">&lt;option</span><span class="ot"> value=</span><span class="st">&quot;B&quot;</span><span class="kw">&gt;</span>B 型<span class="kw">&lt;/option&gt;</span>
        <span class="kw">&lt;option</span><span class="ot"> value=</span><span class="st">&quot;AB&quot;</span><span class="kw">&gt;</span>AB 型<span class="kw">&lt;/option&gt;</span>
        <span class="kw">&lt;option</span><span class="ot"> value=</span><span class="st">&quot;O&quot;</span><span class="kw">&gt;</span>O 型<span class="kw">&lt;/option&gt;</span>
      <span class="kw">&lt;/select&gt;</span> <span class="kw">&lt;br/&gt;</span>
自我介紹： <span class="kw">&lt;br/&gt;</span>
<span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;submit&quot;</span><span class="ot"> value=</span><span class="st">&quot;送出&quot;</span><span class="kw">/&gt;&lt;input</span><span class="ot"> type=</span><span class="st">&quot;reset&quot;</span><span class="ot"> value=</span><span class="st">&quot;清除&quot;</span><span class="kw">/&gt;&lt;br/&gt;</span>
<span class="kw">&lt;/form&gt;</span>
<span class="co">&lt;!-- 預設貼入的HTML：結束 --&gt;</span>
<span class="kw">&lt;/textarea&gt;</span> 
<span class="kw">&lt;/td&gt;</span>
<span class="kw">&lt;td&gt;</span>
<span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;showbox&quot;</span><span class="ot"> style=</span><span class="st">&quot;width:100%; height:500px;&quot;</span><span class="kw">&gt;</span>
<span class="kw">&lt;/div&gt;</span>
<span class="kw">&lt;/td&gt;</span>
<span class="kw">&lt;/tr&gt;&lt;/table&gt;</span>
<span class="kw">&lt;/form&gt;</span>
<span class="kw">&lt;/body&gt;</span>
<span class="kw">&lt;/html&gt;</span></code></pre></div><div id="程式解析" class="section level3"><h3>程式解析</h3><p>上述程式當中有三個主要的區塊，分別是：</p><ol style="list-style-type: decimal"><li>CSS 填入區塊： <code>&lt;textarea id=&quot;cssbox&quot; ...&lt;/textarea&gt;</code></li><li>HTML 填入區塊：<code>&lt;textarea id=&quot;editbox&quot; ...&lt;/textarea&gt;</code></li><li>HTML 顯示區塊：<code>&lt;div id=&quot;showbox&quot; ... &lt;/div&gt;</code></li></ol><p>此網頁的核心程式部分真的很簡單，只有如下短短的一小段：</p><ol style="list-style-type: decimal"><li>利用 <code>var editbox = document.getElementById(&quot;editbox&quot;);</code> 取得 HTML 區塊內容</li><li>利用 <code>showbox.innerHTML = editbox.value;</code> 這個指令將該 HTML 原始碼填入 showbox 當中</li></ol><p>這樣就完成顯示 HTML 的動作了。</p><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="fu">convert</span>() {
  <span class="kw">var</span> cssbox  = <span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;cssbox&quot;</span>);
  <span class="kw">var</span> editbox = <span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;editbox&quot;</span>);
  <span class="kw">var</span> showbox = <span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;showbox&quot;</span>);
  <span class="kw">var</span> showboxstyle = <span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;showboxstyle&quot;</span>);
  <span class="ot">showbox</span>.<span class="fu">innerHTML</span> = <span class="ot">editbox</span>.<span class="fu">value</span>;
  <span class="ot">showboxstyle</span>.<span class="fu">innerHTML</span> = <span class="ot">cssbox</span>.<span class="fu">value</span>;
}</code></pre><p>但是這樣作並沒有加入 cssbox 的內容到 HTML 當中，因此我們加入了下列原始碼：</p><ol style="list-style-type: decimal"><li>在整個網頁的頭部事先用 <code>&lt;style id=&quot;showboxstyle&quot;&gt;...&lt;/style&gt;</code> 這個標記加入一個 CSS style 顯示區塊</li><li>利用 <code>showboxstyle.innerHTML = cssbox.value</code> 這個指令將 cssbox 的內容填入到該表頭的 style 區塊中</li></ol><p>這樣就達成了套用 CSS 內容到網頁中的目的，完成了整個 HTML 編輯器的功能。</p></div><div id="結語-1" class="section level3"><h3>結語</h3><p>在本文中，我們用非常簡單的程式，建構了一個 HTML 編輯器。事實上我們只不過是把網頁內容從編輯區域移動到顯示區域，然後流覽器就會 自動解釋這些內容進行呈現了。</p><p>在本系列的文章中，關於瀏覽器部分的 JavaScript 程式，我們將至此告一個段落，在下一期當中，我們將開始進入伺服端的 javascript 程式。 我們將利用 node.js 這個伺服端 JavaScript 執行平台，進一步探索 JavaScript 程式的奧秘，我們下期見！</p></div><div id="參考" class="section level3"><h3>參考</h3><ul><li><a href="http://stackoverflow.com/questions/1720320/how-to-dynamically-create-css-class-in-javascript-and-apply">http://stackoverflow.com/questions/1720320/how-to-dynamically-create-css-class-in-javascript-and-apply</a></li><li><a href="http://dev.opera.com/articles/view/dynamic-style-css-javascript/">http://dev.opera.com/articles/view/dynamic-style-css-javascript/</a></li></ul></div></div><div id="r-統計軟體3-中央極限定理-作者陳鍾誠" class="section level2"><h2>R 統計軟體(3) – 中央極限定理 (作者：陳鍾誠)</h2><p>中央極限定理是機率統計上最重要的定理之一，整個統計的估計與檢定幾乎都建立在這個定理之上，因此 對「中央極限定理」有清楚的理解是學好機率統計的一個關鍵。</p><p>在本文中，我們將利用 R 軟體實作並驗證「中央極限定理」，讓讀者能透過程式實際體會該定理的重要性與用途。</p><div id="中央極限定理簡介" class="section level3"><h3>中央極限定理簡介</h3><p>中央極限定理的數學式：<img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cfrac%7Bx_1%2Bx_2%2B...%2Bx_n%7D%7Bn%7D%20%20%3D%20%5Cbar%7Bx%7D%20%5Crightarrow%20N%28%5Cmu%2C%20%5Csigma%2F%5Csqrt%7Bn%7D%29" alt="\frac{x_1+x_2+...+x_n}{n}  = \bar{x} \rightarrow N(\mu, \sigma/\sqrt{n})" title="\frac{x_1+x_2+...+x_n}{n}  = \bar{x} \rightarrow N(\mu, \sigma/\sqrt{n})" /></p><p>如果用白話文陳述，那就是說 n 個樣本的平均數 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cbar%7Bx%7D" alt="\bar{x}" title="\bar{x}" /> 會趨近於常態分布。</p><p>更精確一點的說，當您從某個母體 X 取出 n 個樣本，則這 n 個樣本的平均數 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cbar%7Bx%7D" alt="\bar{x}" title="\bar{x}" /> 會趨近於以平均期望值 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmu" alt="\mu" title="\mu" /> 為中心， 以母體標準差 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Csigma" alt="\sigma" title="\sigma" /> 除以 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Csqrt%7Bn%7D" alt="\sqrt{n}" title="\sqrt{n}" /> 的值 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Csigma%2F%5Csqrt%7Bn%7D" alt="\sigma/\sqrt{n}" title="\sigma/\sqrt{n}" /> 為標準差的常態分布。</p><p>如果採用另一種正規化後的公式寫法，也可以將上述的「中央極限定理」改寫為：<img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cfrac%7B%5Cbar%7Bx%7D-%5Cmu%7D%7B%5Csigma%2F%5Csqrt%7Bn%7D%7D%20%5Crightarrow%20Z" alt="\frac{\bar{x}-\mu}{\sigma/\sqrt{n}} \rightarrow Z" title="\frac{\bar{x}-\mu}{\sigma/\sqrt{n}} \rightarrow Z" /></p><p>其中的 Z 是指標準常態分部，也就是 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cfrac%7B%5Cbar%7Bx%7D-%5Cmu%7D%7B%5Csigma%2F%5Csqrt%7Bn%7D%7D" alt="\frac{\bar{x}-\mu}{\sigma/\sqrt{n}}" title="\frac{\bar{x}-\mu}{\sigma/\sqrt{n}}" /> 會趨近標準常態分布。</p></div><div id="中央極限定理的用途" class="section level3"><h3>中央極限定理的用途</h3><p>根據上述的定義，我們知道當樣本數 n 足夠大時 (通常 20 個以上就夠大了)， n 個樣本的平均值 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cfrac%7Bx_1%2Bx_2%2B...%2Bx_n%7D%7Bn%7D" alt="\frac{x_1+x_2+...+x_n}{n}" title="\frac{x_1+x_2+...+x_n}{n}" /><br />(也就是 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cbar%7Bx%7D" alt="\bar{x}" title="\bar{x}" />) 會趨近於常態分布，換句話說也就是 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cfrac%7B%5Cbar%7Bx%7D-%5Cmu%7D%7B%5Csigma%2F%5Csqrt%7Bn%7D%7D" alt="\frac{\bar{x}-\mu}{\sigma/\sqrt{n}}" title="\frac{\bar{x}-\mu}{\sigma/\sqrt{n}}" /> 會趨近於標準常態分布。</p><p>因此、當我們取得一組樣本之後，我們就可以計算其平均數 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cfrac%7Bx_1%2Bx_2%2B...%2Bx_n%7D%7Bn%7D%3D%5Cbar%7Bx%7D" alt="\frac{x_1+x_2+...+x_n}{n}=\bar{x}" title="\frac{x_1+x_2+...+x_n}{n}=\bar{x}" /> ，如果有人告訴我們說母體的 平均數 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmu" alt="\mu" title="\mu" /> 的值是多少，我們就可以看看 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cbar%7Bx%7D" alt="\bar{x}" title="\bar{x}" /> 與 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmu" alt="\mu" title="\mu" /> 是否差距很遠，如果差距很遠，導致 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cbar%7Bx%7D" alt="\bar{x}" title="\bar{x}" /> 來自平均數 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmu" alt="\mu" title="\mu" /> 母體的機率很小，那麼很可能是此組樣本是非常罕見的特例，或者該組樣本的抽樣有所偏差，也就是該組樣本很可能並非來自平均數為 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmu" alt="\mu" title="\mu" /> 的母體。</p><p>以下是一些標準常態分布的重要數值，</p><ol style="list-style-type: decimal"><li><img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=P%5B-%5Csigma%20%3C%20X%20-%20%5Cmu%20%3C%20%5Csigma%5D%20%3D%200.68" alt="P[-\sigma &lt; X - \mu &lt; \sigma] = 0.68" title="P[-\sigma &lt; X - \mu &lt; \sigma] = 0.68" /></li><li><img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=P%5B-2%20%5Csigma%20%3C%20X%20-%20%5Cmu%20%3C%202%20%5Csigma%5D%20%3D%200.95" alt="P[-2 \sigma &lt; X - \mu &lt; 2 \sigma] = 0.95" title="P[-2 \sigma &lt; X - \mu &lt; 2 \sigma] = 0.95" /></li><li><img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=P%5B-3%20%5Csigma%20%3C%20X%20-%20%5Cmu%20%3C%203%20%5Csigma%5D%20%3D%200.997" alt="P[-3 \sigma &lt; X - \mu &lt; 3 \sigma] = 0.997" title="P[-3 \sigma &lt; X - \mu &lt; 3 \sigma] = 0.997" /></li><li><img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=P%5B-4%20%5Csigma%20%3C%20X%20-%20%5Cmu%20%3C%204%20%5Csigma%5D%20%3D%200.99993" alt="P[-4 \sigma &lt; X - \mu &lt; 4 \sigma] = 0.99993" title="P[-4 \sigma &lt; X - \mu &lt; 4 \sigma] = 0.99993" /></li><li><img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=P%5B-5%20%5Csigma%20%3C%20X%20-%20%5Cmu%20%3C%205%20%5Csigma%5D%20%3D%200.9999994" alt="P[-5 \sigma &lt; X - \mu &lt; 5 \sigma] = 0.9999994" title="P[-5 \sigma &lt; X - \mu &lt; 5 \sigma] = 0.9999994" /></li><li><img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=P%5B-6%20%5Csigma%20%3C%20X%20-%20%5Cmu%20%3C%206%20%5Csigma%5D%20%3D%200.999999998" alt="P[-6 \sigma &lt; X - \mu &lt; 6 \sigma] = 0.999999998" title="P[-6 \sigma &lt; X - \mu &lt; 6 \sigma] = 0.999999998" /></li></ol><pre class="sourceCode R"><code class="sourceCode r">&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">1</span>)-<span class="kw">pnorm</span>(-<span class="dv">1</span>)
[<span class="dv">1</span>] <span class="fl">0.6826895</span>
&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">2</span>)-<span class="kw">pnorm</span>(-<span class="dv">2</span>)
[<span class="dv">1</span>] <span class="fl">0.9544997</span>
&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">3</span>)-<span class="kw">pnorm</span>(-<span class="dv">3</span>)
[<span class="dv">1</span>] <span class="fl">0.9973002</span>
&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">4</span>)-<span class="kw">pnorm</span>(-<span class="dv">4</span>)
[<span class="dv">1</span>] <span class="fl">0.9999367</span>
&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">5</span>)-<span class="kw">pnorm</span>(-<span class="dv">5</span>)
[<span class="dv">1</span>] <span class="fl">0.9999994</span>
&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">6</span>)-<span class="kw">pnorm</span>(-<span class="dv">6</span>)
[<span class="dv">1</span>] <span class="dv">1</span>
&gt;<span class="st"> </span><span class="kw">options</span>(<span class="dt">digits=</span><span class="dv">10</span>)
&gt;<span class="st"> </span><span class="kw">pnorm</span>(<span class="dv">6</span>)-<span class="kw">pnorm</span>(-<span class="dv">6</span>)
[<span class="dv">1</span>] <span class="fl">0.999999998</span></code></pre><p>從上面的數值您可以看出來，管理學上所謂的六標準差其實是很高的一個要求，也就是良率必須要達到 99.9999998% 以上才行。</p><p>如果您今天所取的 n 個樣本，與母體平均數 <img style="vertical-align:middle" src="http://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmu" alt="\mu" title="\mu" /> 距離兩個標準差以上，那就很可能有問題了，這種推論稱為檢定，我們可以用 R 軟體中的 t.test 函數來檢驗這件事，我們將在下一期當中說明如何用 R 軟體進行統計檢定的主題，讓我們先將焦點移回到中央極限定理身上，用 R 軟體 來驗證該定理。</p></div><div id="r-程式範例驗證中央極限定理" class="section level3"><h3>R 程式範例：驗證中央極限定理</h3><pre class="sourceCode R"><code class="sourceCode r">&gt;<span class="st"> </span>u &lt;-<span class="st"> </span><span class="kw">matrix</span> ( <span class="kw">runif</span>(<span class="dv">500000</span>), <span class="dv">50</span>, <span class="dv">10000</span> )
&gt;<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">apply</span> ( u, <span class="dv">2</span>, mean )
&gt;<span class="st"> </span><span class="kw">hist</span>(u[,<span class="dv">1</span>])
&gt;<span class="st"> </span><span class="kw">hist</span>(y)
&gt;<span class="st"> </span>?apply
&gt;<span class="st"> </span></code></pre><p>說明：</p><ol style="list-style-type: decimal"><li>u 乃是將 50 萬個 uniform 樣本分配成 50*10000 的矩陣，</li><li>y 對 u 進行列統計 apply ( u, 2, mean ) 代表對每行取平均值 mean(col of u) 的結果。</li><li>因此 y 代表從 Uniform Distribution 中每次取出 50 個樣本，然後進行加總平均 (x1+x2+...+x50)/50 的結果。</li><li>從下列的 hist(y) 圖形中，我們可以看到中央極限定理的證據：[[$ <em>i = mean(x</em>i[1,50])$ 會趨向常態分布。</li></ol><div class="figure"><img src="images/img7.jpg" alt="圖、hist(u[,1]) 畫出的圖形" /><p class="caption">圖、hist(u[,1]) 畫出的圖形</p></div><div class="figure"><img src="images/img8.jpg" alt="圖、hist(y) 畫出的圖形" /><p class="caption">圖、hist(y) 畫出的圖形</p></div><pre class="sourceCode R"><code class="sourceCode r">CLT =<span class="st"> </span>function(x) {
  op&lt;-<span class="kw">par</span>(<span class="dt">mfrow=</span><span class="kw">c</span>(<span class="dv">2</span>,<span class="dv">2</span>)) <span class="co"># 設為 2*2 的四格繪圖版</span>
  <span class="kw">hist</span>(x, <span class="dt">nclass=</span><span class="dv">50</span>)     <span class="co"># 繪製 x 序列的直方圖 (histogram)。</span>
  m2 &lt;-<span class="st"> </span><span class="kw">matrix</span>(x, <span class="dt">nrow=</span><span class="dv">2</span>, )  <span class="co"># 將 x 序列分為 2*k 兩個一組的矩陣 m2。</span>
  xbar2 &lt;-<span class="st"> </span><span class="kw">apply</span>(m2, <span class="dv">2</span>, mean)   <span class="co"># 取每兩個一組的平均值 (x1+x2)/2 放入 xbar2 中。</span>
  <span class="kw">hist</span>(xbar2, <span class="dt">nclass=</span><span class="dv">50</span>)     <span class="co"># 繪製 xbar2 序列的直方圖 (histogram)。</span>
  m10 &lt;-<span class="st"> </span><span class="kw">matrix</span>(x, <span class="dt">nrow=</span><span class="dv">10</span>, )   <span class="co"># 將 x 序列分為 10*k 兩個一組的矩陣 m10。</span>
  xbar10 &lt;-<span class="st"> </span><span class="kw">apply</span>(m10, <span class="dv">2</span>, mean) <span class="co"># 取每10個一組的平均值 (x1+..+x10)/10 放入 xbar10 中。</span>
  <span class="kw">hist</span>(xbar10, <span class="dt">nclass=</span><span class="dv">50</span>)    <span class="co"># 繪製 xbar10 序列的直方圖 (histogram)。</span>
  m20 &lt;-<span class="st"> </span><span class="kw">matrix</span>(x, <span class="dt">nrow=</span><span class="dv">20</span>, )   <span class="co"># 將 x 序列分為 25*k 兩個一組的矩陣 m25。</span>
  xbar20 &lt;-<span class="st"> </span><span class="kw">apply</span>(m20, <span class="dv">2</span>, mean) <span class="co"># 取每20個一組的平均值 (x1+..+x20)/20 放入 xbar20 中。</span>
  <span class="kw">hist</span>(xbar20, <span class="dt">nclass=</span><span class="dv">50</span>)    <span class="co"># 繪製 xbar20 序列的直方圖 (histogram)。</span>
}

<span class="kw">CLT</span>(<span class="kw">rbinom</span>(<span class="dv">100000</span>, <span class="dv">20</span>, <span class="fl">0.5</span>)) <span class="co"># 用參數為 n=20, p=0.5 的二項分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">runif</span>(<span class="dv">100000</span>)) <span class="co"># 用參數為 a=0, b=1 的均等分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">rpois</span>(<span class="dv">100000</span>, <span class="dv">4</span>)) <span class="co"># 用參數為 lambda=4 的布瓦松分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">rgeom</span>(<span class="dv">100000</span>, <span class="fl">0.5</span>)) <span class="co"># 用參數為 n=20, m=10, k=5 的超幾何分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">rhyper</span>(<span class="dv">100000</span>, <span class="dv">20</span>, <span class="dv">10</span>, <span class="dv">5</span>)) <span class="co"># 用參數為 p=0.5 的幾何分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">rnorm</span>(<span class="dv">100000</span>)) <span class="co"># 用參數為 mean=0, sd=1 的標準常態分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">sample</span>(<span class="dv">1</span>:<span class="dv">6</span>, <span class="dv">100000</span>, <span class="dt">replace=</span>T)) <span class="co"># 用擲骰子的分布驗證中央極限定理。</span>
<span class="kw">CLT</span>(<span class="kw">sample</span>(<span class="dv">0</span>:<span class="dv">1</span>, <span class="dv">100000</span>, <span class="dt">replace=</span>T)) <span class="co"># 用丟銅板的分布驗證中央極限定理。</span></code></pre><p>以下是這些指令的執行結果，從這些圖中您可以看到當樣本數到達 20 個的時候，幾乎每種樣本都會趨向常態分布。</p><div class="figure"><img src="images/img9.jpg" alt="圖、指令 CLT(rbinom(100000, 20, 0.5)) 的執行結果" /><p class="caption">圖、指令 CLT(rbinom(100000, 20, 0.5)) 的執行結果</p></div><div class="figure"><img src="images/img10.jpg" alt="圖、指令 CLT(runif(100000)) 的執行結果" /><p class="caption">圖、指令 CLT(runif(100000)) 的執行結果</p></div><div class="figure"><img src="images/img11.jpg" alt="圖、指令 CLT(rpois(100000, 4)) 的執行結果" /><p class="caption">圖、指令 CLT(rpois(100000, 4)) 的執行結果</p></div><div class="figure"><img src="images/img12.jpg" alt="圖、指令 CLT(rgeom(100000, 0.5)) 的執行結果" /><p class="caption">圖、指令 CLT(rgeom(100000, 0.5)) 的執行結果</p></div><div class="figure"><img src="images/img13.jpg" alt="圖、指令 CLT(rhyper(100000, 20, 10, 5)) 的執行結果" /><p class="caption">圖、指令 CLT(rhyper(100000, 20, 10, 5)) 的執行結果</p></div><div class="figure"><img src="images/img14.jpg" alt="圖、指令 CLT(rnorm(100000)) 的執行結果" /><p class="caption">圖、指令 CLT(rnorm(100000)) 的執行結果</p></div><div class="figure"><img src="images/img15.jpg" alt="圖、指令 CLT(sample(1:6, 100000, replace=T)) 的執行結果" /><p class="caption">圖、指令 CLT(sample(1:6, 100000, replace=T)) 的執行結果</p></div><div class="figure"><img src="images/img16.jpg" alt="圖、指令 CLT(sample(0:1, 100000, replace=T)) 的執行結果" /><p class="caption">圖、指令 CLT(sample(0:1, 100000, replace=T)) 的執行結果</p></div></div><div id="參考文獻-5" class="section level3"><h3>參考文獻</h3><ol style="list-style-type: decimal"><li><a href="http://msenux.redwoods.edu/math/R/CentralLimit.php">The Central Limit Theorem (Part 1)</a></li><li><a href="http://episte.math.ntu.edu.tw/articles/mm/mm_09_3_07/index.html">洋洋 -- 淺談機率上的幾個極限定理</a></li><li>Proof of Central Limit Theorem, H. Krieger, Mathematics 157, Harvey Mudd College, Spring, 2005<ul><li><a href="http://www.math.hmc.edu/~krieger/m157cltproof.pdf">http://www.math.hmc.edu/~krieger/m157cltproof.pdf</a></li></ul></li><li><a href="http://en.wikipedia.org/wiki/Central_limit_theorem">Central limit theorem:From Wikipedia, the free encyclopedia</a></li><li>Two Proofs of the Central Limit Theorem, Yuval Filmus, January/February 2010<ul><li><a href="http://www.cs.toronto.edu/~yuvalf/CLT.pdf">http://www.cs.toronto.edu/~yuvalf/CLT.pdf</a></li></ul></li></ol></div></div><div id="opencv-1-c-語言影像辨識函式庫----簡介安裝與基本範例-作者da-wang" class="section level2"><h2>OpenCV (1) – C 語言影像辨識函式庫 -- 簡介、安裝與基本範例 (作者：Da Wang)</h2><p>OpenCV 是 Intel 所釋出的一組影像辨識函式庫，功能相當強大，從本期開始， 我們將刊載由 Da Wang 一連串的 OpenCV 系列文章，讓讀者得以透過這些文章 進入影像辨識與處理的領域，這些文章的原文網誌位於以下網址：</p><ul><li><a href="http://yester-place.blogspot.tw/search/label/OpenCV">http://yester-place.blogspot.tw/search/label/OpenCV</a></li></ul><p>然而、網誌中的文章是 2008 年開始寫的，因此在使用的 OpenCV 版本上有些許落差， 為了彌補這樣的問題，編輯請 Da Wang 幫我們補充了最新的 OpenCV 2.44 版的程式示範，這個新版採用 cmake 建置軟體，可以編出 GNU make 專案或 Visual Studio 的專案，讓讀者能透過這樣的示範順利的執行 網誌中的這些程式。</p><div id="簡介" class="section level3"><h3>簡介</h3><p>OpenCV(Open Source Computer Vision) : 由Intel公司所開發出來的Open Source圖形演算法的函式庫(Image Process Libary)可以製做圖片，視訊，矩陣運算，統計，圖論，資料儲存的相關 C 語言程式設計，</p><p>相關的領域為:影像處理，電腦視覺，圖形識別，電腦圖學，資訊檢索或遊戲設計，比較有名的製作為物體追蹤，人臉辨識，傅立葉轉換，紋理分析， 可以整合不同圖檔格式的矩陣運算，應用在靜態圖片(BMP,JPG,TIF,PNG) ，動態Webcam的影像處理。</p><p>OpenCV 的組成為許多圖形處理的資料結構及演算法所疊合而成， 因此需要一些基本的資料結構基礎， 比如說 struct 怎麼使用， 如何 release 資料結構的空間等基本操作，會使用到 linked list 的算少數， 算是C語言中級程式設計， 有興趣玩的話，國內影像處理領域相關論文演算法幾乎都可以在OpenCV找的到，方便學術界用c語言推演更進階的影像處理演算法， 功能好比Matlab，但比Matlab快上許多倍，更可以整合c語言相關函式庫，做更多元強大的功能應用，然而它最大的門檻是比 Matlab 的進入障礙還高一些， 運用到許多資料結構，指標運算，記憶體位址，學完OpenCV，相信程式設計的功力更可以技高一籌。</p><p>OpenCV 提供了簡單的GUI介面， 他無法像 MicroSoft Visual C++ 的 MFC 及 Borland C++builder 的 VCL 那麼完整，但如果是對於學術領域的研究是夠用的，他也可以整合在Visual C++及C++ builder的環境上， 而本人是以Dev - C++為主， 屬於最基本簡單又不須付費的 Complier。</p><p>接下來進入 OpenCV 最基礎的入門， OpenCV 最常用的函式庫為 &quot;cv.h&quot;，&quot;highgui.h&quot;，&quot;cxcore.h&quot;及&quot;cvaux.h.h&quot;，&quot;cv.h&quot;代表Computer Vision， 電腦視覺函式庫， &quot;highgui.h&quot;， 當然就是GUI介面的函式庫啦， 當路徑都設定好之後(第一篇安裝方法)， 直接在開頭include進去就好啦，就跟stdio.h的使用方法一樣</p><pre class="sourceCode CPP"><code class="sourceCode cpp"><span class="ot">#include &lt;stdio.h&gt;</span>
<span class="ot">#include &lt;cv.h&gt;</span>
<span class="ot">#include &lt;highgui.h&gt;</span>
<span class="ot">#include &lt;cxcore.h&gt;</span>
<span class="ot">#include &lt;cvaux.h&gt;</span></code></pre></div><div id="顯示靜態圖片" class="section level3"><h3>顯示靜態圖片</h3><p>接著，就介紹最基本的資料結構，IplImage，此資料結構是所有圖檔的一個中介，圖檔格式有很多種(bmp,jpg,png,tif)，此資料結構的內容既不是bmp，也不是jpg，而是一個藉由cvLoadImage()所轉換的自定義格式如下所示:</p><div class="figure"><img src="images/img17.jpg" /></div><p>讀入圖片之後，要怎麼知道圖片真的讀入了呢，就利用&quot;highgui.h&quot;的功能來檢視看看吧。</p><pre class="sourceCode CPP"><code class="sourceCode cpp">cvNamedWindow(<span class="st">&quot;Show Image&quot;</span>,<span class="dv">0</span>); 
cvResizeWindow(<span class="st">&quot;Show Image&quot;</span>,<span class="dv">300</span>,<span class="dv">400</span>); 
cvShowImage(<span class="st">&quot;Show Image&quot;</span>,Image1);</code></pre><p>要使用 OpenCV 的 GUI 時， 要先給視窗名稱命名， 這算是比較好寫的GUI之ㄧ了， 裡面&quot;Show Image&quot;就是這個視窗的名稱，cvResizeWindow()就是調整視窗大小，視窗大小被設定在300*400，並指定視窗的名稱，再來，就是顯示視窗的圖片cvShowImage()，並且給予IplImage資料結構的結構變數，Image1裡面必須要先用cvLoadImage()存入圖檔，接著，再用鍵盤事件cvWaitKey(0)來做阻斷，一張圖片就可以被開啟啦，這是OpenCV最基本的操作之ㄧ，也像是c語言的&quot;hello world&quot;的開始，恭喜跨入第一步。</p><p>當資料結構被創立之後，當然要做回收的動作啦，在這邊IplImage的資料結構被創立，視窗介面的資料結構也被創立，當執行完就要做回收的動作啦，所有的資料結構都會被malloc()的副程式配置空間，而cvLoadImage()只是把一連串的動作隱藏起來，cvLoadImage()不但做了配置IplImage的資料結構空間，也把所有副檔名格式的資料初始化，將所有的數值及一些簡單的分析都存在IplImage的資料結構內，方便做一些圖形演算法的運算，而視窗介面被cvNamedWindow()給創立，視窗的資料結構被隱含在cvNamedWindow()中，使用者只要使用&quot;Show Image&quot;等命名操控就可以使用GUI視窗的控制，這是一種分層抽象的概念，比較複雜的部份被程式碼包再它的下一層，因此，我只要操控該視窗的字串名稱(&quot;Show Image&quot;)就可以做任何想要的動作了。</p><p>這邊用cvDestroyWindow()及cvReleaseImage()回收給系統，回收的東西是記憶體，一般來說，不做記憶體回收也不會影響電腦的效能太大，作業系統也會自動的做垃圾收集，把一些沒意義的記憶體做刪除，因此程式碼不多這兩行也不會有太大的影響，不過這種東西畢竟是卡記憶體的，也不能確定它是不是永久卡位(電腦關機後一定消失)，因此，養成良好的習慣是程式設計師必備的，尤其是再做一個大的應用程式的時候。</p><p>簡單的OpenCV讀取圖形檔案程式碼</p><pre class="sourceCode CPP"><code class="sourceCode cpp"><span class="ot">#include &lt;stdio.h&gt;</span>
<span class="ot">#include &lt;cv.h&gt;</span>
<span class="ot">#include &lt;highgui.h&gt; </span>

<span class="dt">int</span> main()
{
    <span class="dt">char</span> FileName[<span class="dv">10</span>]=<span class="st">&quot;rain.jpg&quot;</span>;

    IplImage *Image1 = cvLoadImage(FileName,<span class="dv">1</span>);

    cvNamedWindow(<span class="st">&quot;Show Image&quot;</span>,<span class="dv">0</span>);

    cvResizeWindow(<span class="st">&quot;Show Image&quot;</span>,<span class="dv">300</span>,<span class="dv">400</span>);

    cvShowImage(<span class="st">&quot;Show Image&quot;</span>,Image1);

    cvWaitKey(<span class="dv">0</span>); 

    cvDestroyWindow(<span class="st">&quot;Show Image&quot;</span>);

    cvReleaseImage(&amp;Image1);
}</code></pre><p>圖片:</p><div class="figure"><img src="images/img18.jpg" /></div><p>執行結果:</p><div class="figure"><img src="images/img19.jpg" /></div></div><div id="使用-webcam-抓取動態影片" class="section level3"><h3>使用 WebCam 抓取動態影片</h3><p>視訊的使用也是OpenCV的基本功能之一，它可以做連續性的影像處理，比capCreateCaptureWindow()這個函式好用多了， capCreateCaptureWindow()在&quot;vfw.h&quot;裡，只能在MicroSoft的Visual C++及 Borland C++ builder 使用， Dev-C++4.9.9.2 不提供此函式， 當然啦， OpenCV對於視訊的處理提供了比capCreateCaptureWindow()更強大的功能。</p><p>程式碼部份</p><pre class="sourceCode CPP"><code class="sourceCode cpp"><span class="ot">#include &lt;cv.h&gt;</span>
<span class="ot">#include &lt;highgui.h&gt;</span>
<span class="ot">#include &lt;stdio.h&gt;</span>

<span class="dt">int</span> main()
{
    CvCapture *capture;
    IplImage *frame;
    capture =cvCaptureFromCAM(<span class="dv">0</span>) ;
    cvNamedWindow(<span class="st">&quot;Webcam&quot;</span>，<span class="dv">0</span>);
    <span class="kw">while</span>(<span class="kw">true</span>)
    {
        frame = cvQueryFrame(capture);
        cvShowImage(<span class="st">&quot;Webcam&quot;</span>,frame);
        <span class="kw">if</span>(cvWaitKey(<span class="dv">10</span>)&gt;=<span class="dv">0</span>)
        {
              <span class="kw">break</span>;
        }
    }
    cvReleaseCapture(&amp;capture);
    cvDestroyWindow(<span class="st">&quot;Webcam&quot;</span>);
}</code></pre><p>裡面使用到CvCapture及IplImage兩個資料結構，CvCapture是一個Interface的資料結構，為一個資料結構的雛形，無任何的變數型別存在，由cvCaptureFromCAM(0)來選定Webcam裝置，cvCaptureFromCAM(0)的0代表自動偵測視訊裝置，如果有兩台以上的Webcam則就用連續兩個cvCaptureFromCAM(0)函式來擷取，接著，就用while(true)的無窮回圈來捕捉連續影像的圖形畫面，cvQueryFrame()則用來擷取每秒顯示出來的frame這裡由cvWaitKey(10)來控制擷取時間，每延遲10毫秒捕捉一次視訊畫面，cvWaitKey()為鍵盤事件，每超過10毫秒則會回傳-1，因此，畫面會因cvWaitKey(10)而延遲10毫秒，接著由無窮回圈來繼續播放，當鍵盤事件發生的時候則會跳出whlie的無窮回圈，接著就把CvCapture資料結構及視窗介面資料結構做記憶體的釋放。</p><p>執行結果:</p><div class="figure"><img src="images/img20.jpg" /></div></div><div id="opencv-2.44-版的安裝與使用-搭配-cmake-與-visual-studio" class="section level3"><h3>OpenCV 2.44 版的安裝與使用 (搭配 CMake 與 Visual Studio)</h3><div id="下載並安裝-cmake-opencv" class="section level4"><h4>下載並安裝 CMake , OpenCV</h4><p>下載 CMAKE : <a href="http://www.cmake.org/">http://www.cmake.org/</a></p><div class="figure"><img src="images/img21.png" /></div><p>下載 OpenCV：<a href="http://opencv.org/downloads.html">http://opencv.org/downloads.html</a></p><div class="figure"><img src="images/img22.png" /></div><p>開啟檔案選擇 <code>c:\</code></p><div class="figure"><img src="images/img23.png" /></div><p>安裝 CMAKE</p><div class="figure"><img src="images/img24.png" /></div></div><div id="透過-cmake-建置-opencv-專案" class="section level4"><h4>透過 CMAKE 建置 OpenCV 專案</h4><p>開啟CMAKE選擇路徑 <code>c:\opencv</code>，點選 configure</p><div class="figure"><img src="images/img25.png" /></div><p>選擇編譯器種類</p><div class="figure"><img src="images/img26.png" /></div><p>如何看編譯器呢? 方法是從Visual Studio menu 上面點選說明 (我的 Visual Studio 2012 為 Visual Studio 11)</p><div class="figure"><img src="images/img27.png" /></div><p>勾選Build Example，並按下Generate</p><div class="figure"><img src="images/img28.png" /></div><p>Visual Studio 2012 的專案 sln 檔將會自動產生</p><div class="figure"><img src="images/img29.png" /></div><p>開啟後，選取「Debug Mode 建製方案」或「Release Mode建製方案」</p><div class="figure"><img src="images/img30.png" /></div><p>設定動態鏈結函式庫路徑(DLL檔) (位於「控制台-&gt;進階-&gt;環境變數」)</p><p><img src="images/img32.png" /> <img src="images/img31.png" /></p></div><div id="opencv-的-vs-2012-vusual-c-環境設立" class="section level4"><h4>OpenCV 的 VS 2012 Vusual C++ 環境設立</h4><p>開啟一個空專案test，一個source.cpp檔，選取屬性管理員</p><div class="figure"><img src="images/img33.png" /></div><p>選取 Microsofr.Cpp.Win32.user 設定</p><div class="figure"><img src="images/img34.png" /></div><p>設定 VC++ 目錄的</p><ol style="list-style-type: decimal"><li>Include目錄</li><li>程式目錄</li></ol><div class="figure"><img src="images/img35.png" /></div><p>加入以下項目</p><p><code>C:\opencv\build\include</code></p><div class="figure"><img src="images/img36.png" /></div><p><code>C:\opencv\lib\Release</code></p><div class="figure"><img src="images/img37.png" /></div><p>點選連結器-&gt;輸入</p><div class="figure"><img src="images/img38.png" /></div><p>加入以下項目</p><pre><code>opencv_core244.lib
opencv_calib3d244.lib
opencv_contrib244.lib
opencv_features2d244.lib
opencv_highgui244.lib
opencv_imgproc244.lib</code></pre><div class="figure"><img src="images/img39.png" /></div><p>建置方案</p><div class="figure"><img src="images/img40.png" /></div></div></div><div id="原文連結" class="section level3"><h3>原文連結</h3><ul><li><a href="http://yester-place.blogspot.tw/search/label/OpenCV%E4%BB%8B%E7%B4%B9">OpenCV程式設計介紹(1)</a></li><li><a href="http://yester-place.blogspot.tw/2008/06/opencv2.html">OpenCV程式設計介紹(2)</a></li><li><a href="https://www.dropbox.com/s/es8lkwtlhcp1opx/opencv%20install.doc">OpenCV 2.44 安裝與使用:採用 cmake 與 Visual Studio (doc)</a></li></ul><p>【本文原始作者為 Da Wang, 由陳鍾誠編輯加註後納入雜誌】</p></div></div></div>
</body>
</html>

